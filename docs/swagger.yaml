definitions:
  CheckUserByIdTokenRequest:
    properties:
      idToken:
        type: string
    type: object
  CheckUserByIdTokenResponse:
    properties:
      exist:
        type: boolean
    type: object
  CreateMovieRequest:
    properties:
      description:
        type: string
      name:
        type: string
      thumbnailUrl:
        type: string
    type: object
  CreateUserRequest:
    properties:
      idToken:
        type: string
      username:
        type: string
    type: object
  MovieDto:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      thumbnailUrl:
        type: string
    type: object
  UpdateMovieRequest:
    properties:
      description:
        type: string
      name:
        type: string
      thumbnailUrl:
        type: string
    type: object
  UserDto:
    properties:
      id:
        type: string
      username:
        type: string
    type: object
  VoteMovieRequest:
    properties:
      voteType:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server Petstore server.
  title: Swagger Example API
  version: "1.0"
paths:
  /movies:
    post:
      consumes:
      - application/json
      operationId: CreateMovie
      parameters:
      - description: name
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/CreateMovieRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MovieDto'
      security:
      - ApiKeyAuth: []
      summary: Create new movie
      tags:
      - movie
  /movies/{id}:
    put:
      consumes:
      - application/json
      description: Update the details of an existing movie
      operationId: UpdateMovie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated movie details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/UpdateMovieRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MovieDto'
      security:
      - ApiKeyAuth: []
      summary: Update movie details
      tags:
      - movie
  /movies/{id}/vote:
    post:
      consumes:
      - application/json
      description: Upvote or downvote a movie
      operationId: VoteMovie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      - description: Vote details
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/VoteMovieRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MovieDto'
      security:
      - ApiKeyAuth: []
      summary: Vote for a movie
      tags:
      - movie
  /users:
    post:
      consumes:
      - application/json
      description: Create new user
      operationId: CreateUser
      parameters:
      - description: username
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserDto'
      security:
      - ApiKeyAuth: []
      summary: Create new user
      tags:
      - user
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by user id
      operationId: GetUserByUserId
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserDto'
      summary: Get user by user id
      tags:
      - user
  /users/exists:
    post:
      consumes:
      - application/json
      description: Check user exist
      operationId: existsUserByIdToken
      parameters:
      - description: idToken
        in: body
        name: idToken
        required: true
        schema:
          $ref: '#/definitions/CheckUserByIdTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CheckUserByIdTokenResponse'
      summary: Check exist user by id token
      tags:
      - user
swagger: "2.0"
