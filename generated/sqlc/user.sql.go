// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc_generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const existsUserByUserId = `-- name: ExistsUserByUserId :one
SELECT EXISTS (
    SELECT 1
    FROM d_users
    WHERE user_id = $1
    LIMIT 1
)
`

func (q *Queries) ExistsUserByUserId(ctx context.Context, userID string) (bool, error) {
	row := q.db.QueryRow(ctx, existsUserByUserId, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const findUserByUserId = `-- name: FindUserByUserId :one
SELECT id, user_id, username, created_at, updated_at, created_by, updated_by
FROM d_users
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) FindUserByUserId(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByUserId, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserId,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const saveUser = `-- name: SaveUser :one
INSERT INTO d_users (user_id, username, created_by, updated_by)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type SaveUserParams struct {
	UserId    string
	Username  pgtype.Text
	CreatedBy pgtype.Text
	UpdatedBy pgtype.Text
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, saveUser,
		arg.UserId,
		arg.Username,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
